* Профилирование проводилось с помощью api из набора jdk jconsole
* Для упрощения отслеживания переполнения кучи, заданы св-ва виртуальной машины:
макс размер кучи 100 мб   -Xmx100m
начальный размер кучи 20 мб -Xms20m

выводы:
1) В окне Heap Memory Usage мы видим график, на котором отображается испрользование 
памяти в куче. При запуске приложения и создании объектов (вызов CreateManyItems) происходит ступенчатое нара-
щивание кучи. После запуска метода DeleteAllItems и провоцирования кучи на чистку, реальное стирание объектов из кучи не происходит.
Это означает, что метод delete, к которому обращаутся DeleteAllItems на самом деле не обнуляет объекты (тогда бы их подцепила
очередная чистка), а лишь стирает индекс id у объектов 
При завершении приложения,размер кучи обнуляется.
Придостижении предельного размера кучи, программа вылетает с Exception java.lang.OutOfMemoryError: Java heap space.


2) В окне Threads отображаются "живые потоки". Их количество неизменнопо мере работы программы,
при заверщении работы кол-во потоков обнуляется

3) В окне Classes показано кол-во загруженных классов, оно резко растет при старте программы 
(видимо начальная инициализация, достигает кол-ва 2500), практически не изменияется при работе
и обнуляется при завершении.

4) В окне CPU Usage oтображается загруженность центрального процессора. Загрузка достигает 5%
при создании новых объектов и снижается до 0 сразу после этого.
